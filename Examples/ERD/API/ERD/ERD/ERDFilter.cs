using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ERD
{
    /// <summary>
    /// The main Filter class for external use.
    /// </summary>
    public class ERDFilter
    {
        /// <summary>
        /// Set this to an array to have specified table names exluded from
        /// generated diagram.
        /// </summary>
        public string[] ExcludeTables { get; set; }

        public bool ShowDataTypes = true;
        public bool ShowColumns = true;

        private SQLCSVFile _loadedFile;
        private List<SQLCSVLine> _lines;
        private List<SQLTable> _tables;

        private SDON.Model.Diagram _root;

        /// <summary>
        /// Loads a CSV (Comma-Separated Value) file that has been pre-imported
        /// to a string to the filter.  The CSV will have been generated by SQL
        /// before loading.  Only one CSV or TSV file can be loaded at once.
        /// </summary>
        /// <param name="csv">String containing the contents of an exported CSV file.</param>
        public void LoadCSVFromString(string csv)
        {
            _loadedFile = new SQLCSVFile(csv, false);
        }

        /// <summary>
        /// Loads a CSV (Comma-Separated Value) file that was exported from
        /// SQL.  Only one CSV or TSV file can be loaded at once.
        /// </summary>
        /// <param name="file">Path of the exported CSV file.</param>
        public void LoadCSVFromFile(string file)
        {
            _loadedFile = new SQLCSVFile(file, true);
        }

        /// <summary>
        /// Loads a TSV (Tab-Separated Value) file that has been pre-imported
        /// to a string to the filter.  The TSV will have been generated by SQL
        /// before loading.  Only one TSV or CSV file can be loaded at once.
        /// </summary>
        /// <param name="tsv">String containing the contents of an exported TSV file.</param>
        public void LoadTSVFromString(string tsv)
        {
            _loadedFile = new SQLCSVFile(tsv, false, '\t');
        }

        /// <summary>
        /// Loads a TSV (Tab-Separated Value) file that was exported from SQL.
        /// Only one TSV or CSV file can be loaded at once.
        /// </summary>
        /// <param name="file">Path of the exported TSV file.</param>
        public void LoadTSVFromFile(string file)
        {
            _loadedFile = new SQLCSVFile(file, true, '\t');
        }

        /// <summary>
        /// Converts the loaded CSV or TSV file and generates an ERD
        /// (Entity-Relationship Diagram).  Make sure there was already a CSV
        /// or TSV loaded from one of the Load CSV or Load TSV methods.
        /// </summary>
        /// <returns>Generated diagram from loaded CSV file.</returns>
        /// <seealso cref="LoadCSVFromFile(string)"/>
        /// <seealso cref="LoadCSVFromString(string)"/>
        /// <seealso cref="LoadTSVFromFile(string)"/>
        /// <seealso cref="LoadTSVFromString(string)"/>
        public SDON.Model.Diagram ConvertDatabase()
        {
            _lines = _loadedFile.ExportLines();
            _tables = new List<SQLTable>();

            int tableIndex;

            bool isShowingColumns = ShowColumns || ShowDataTypes;
            bool isShowingTypes = ShowDataTypes;
            string catalog = null;

            for (int i = 1; i < _lines.Count; i++)
            {
                if ((ExcludeTables != null) && ExcludeTables.Contains(_lines[i].ParentTable))
                {
                    continue;
                }

                tableIndex = findTable(_lines[i].ParentTable);

                if (tableIndex < 0)
                {
                    tableIndex = _tables.Count;
                    _tables.Add(new SQLTable(_lines[i].ParentTable, isShowingColumns, isShowingTypes));
                    _tables[tableIndex].ID = tableIndex + 1;
                }

                _tables[tableIndex].AddEntry(_lines[i]);
            }

            if(_lines.Count >= 2)
            {
                catalog = _lines[1].DatabaseName;
            }

            generateDiagram(catalog);
            return _root;
        }

        /// <summary>
        /// Gets the root after the diagram is generated.  For use for internal
        /// diagram manipulation after generation.
        /// </summary>
        /// <returns>The generated diagram, or <c>null</c> if the CSV or TSV
        /// file has not been converted.</returns>
        /// <seealso cref="ConvertDatabase()"/>
        public SDON.Model.Diagram GetDiagram()
        {
            return _root;
        }

        /// <summary>
        /// Saves the diagram to an SDON file after the diagram has been generated.
        /// </summary>
        /// <param name="outputFile">Path for the file that will be generated.</param>
        /// <seealso cref="ConvertDatabase()"/>
        public void SaveSDONFile(string outputFile)
        {
            string jsonData = SDON.SDONBuilder.ToJSON(_root);

            using (System.IO.StreamWriter file = new System.IO.StreamWriter(outputFile, false, Encoding.UTF8))
            {
                file.Write(jsonData);
            }
        }

        private void generateDiagram(string catalog)
        {
            _root = new SDON.Model.Diagram();
            _root.Version = "20";
            _root.Template = "DatabaseERD";
            _root.Shape = new SDON.Model.Shape();
            _root.Shape.ShapeContainer = new SDON.Model.ShapeContainer();
            _root.Shape.ShapeContainer.Arrangement = SDON.Model.ShapeArrangementTypes.Row;

            //double sqrtTables = Math.Sqrt((double)_tables.Count);
            //int numColumns = (int)Math.Ceiling(sqrtTables);
            //_root.Shape.ShapeContainer.Wrap = numColumns;

            if(catalog != null)
            {
                _root.Title = new SDON.Model.TitleShape();
                _root.Title.Label = catalog;
                _root.Title.TextSize = 18;
            }

            //holy unused
            //_root.RootShape[0].Label = "ENTIRE DATABASE";

            //SDON.Model.ShapeConnector connector;
            //SDON.Model.Shape shape;
            //SQLCSVLine line;
            //int i, j, destTable;
            //int tblX = 0, tblY = 0, dstX, dstY;
            //string startDirection, endDirection;
            //
            //for (i = 0; i < _tables.Count; i++)
            //{
            //    connector = new SDON.Model.ShapeConnector();
            //    shape = _tables[i].ExportAsShape();
            //
            //
            //    for (j = 0; j < _tables[i].GetEntryCount(); j++)
            //    {
            //        line = _tables[i].GetEntry(j);
            //
            //        if (line.LINK_TABLE_NAME != "NULL")
            //        {
            //            destTable = findTable(line.LINK_TABLE_NAME);
            //            dstY = destTable / numColumns;
            //            dstX = destTable - (dstY * numColumns);
            //
            //            startDirection = findStartDirection(tblX, tblY, dstX, dstY);
            //            endDirection = returnOppositeDirection(startDirection);
            //
            //            if (destTable >= 0)
            //            {
            //                //insertReturn(i, destTable, startDirection, endDirection);
            //            }
            //        }
            //    }
            //
            //    //connector.Shapes.Add(shape);
            //    //_root.RootShape[0].ShapeConnector.Add(connector);
            //    //_root.RootShape[0].ShapeContainer.Shapes.Add(shape);
            //    tblX++;
            //    if (tblX >= numColumns)
            //    {
            //        tblX = 0;
            //        tblY++;
            //    }
            //}

            ERDFormatter formatter = new ERDFormatter();

            for (int i = 0; i < _tables.Count; i++)
            {
                formatter.InsertTable(_tables[i]);
            }

            formatter.Format();

            _root.Shape = formatter.MakeDiagram();
            _root.Returns = formatter.GetReturns();
        }

        private int findTable(string name)
        {
            for (int i = _tables.Count - 1; i >= 0; i--)
            {
                if (_tables[i].GetTableName() == name)
                {
                    return i;
                }
            }

            return -1;
        }

        private string findStartDirection(int tblX, int tblY, int dstX, int dstY) //unused, went to formatter
        {
            int dX = tblX - dstX;
            int dY = tblY - dstY;
            int adX = Math.Abs(dX);
            int adY = Math.Abs(dY);

            if (adX > adY)  //Is more horizontal
            {
                if (dX < 0) //Destination is right
                {
                    return SDON.Model.Directions.Right;
                }
                else
                {
                    return SDON.Model.Directions.Left;
                }
            }
            else    //Vertical
            {
                if (dY < 0) //Destination is down
                {
                    return SDON.Model.Directions.Bottom;
                }
                else
                {
                    return SDON.Model.Directions.Top;
                }
            }
        }

        private string returnOppositeDirection(string direction) //unused, went to formatter
        {
            if (direction == SDON.Model.Directions.Left)
            {
                return SDON.Model.Directions.Right;
            }
            if (direction == SDON.Model.Directions.Bottom)
            {
                return SDON.Model.Directions.Top;
            }
            if (direction == SDON.Model.Directions.Right)
            {
                return SDON.Model.Directions.Left;
            }
            return SDON.Model.Directions.Bottom;
        }

        private void insertReturn(int start, int end, string startDirection, string endDirection) //unused, went to formatter
        {
            for (int i = 0; i < _root.Returns.Count; i++)
            {
                if ((_root.Returns[i].StartID == (start + 1)) && (_root.Returns[i].EndID == (end + 1)))
                {
                    return;
                }
                if ((_root.Returns[i].StartID == (end + 1)) && (_root.Returns[i].EndID == (start + 1)))
                {
                    _root.Returns[i].EndArrow = 13;
                    return;
                }
            }

            SDON.Model.Return ret;

            ret = new SDON.Model.Return();
            ret.StartID = start + 1;
            ret.EndID = end + 1;
            ret.StartArrow = 13;
            ret.EndArrow = 15;
            ret.StartDirection = startDirection;
            ret.EndDirection = endDirection;
            _root.Returns.Add(ret);
        }

        public ERDFilter()
        {
            ExcludeTables = null;
        }
    }
}
